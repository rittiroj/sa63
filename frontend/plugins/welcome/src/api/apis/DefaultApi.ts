/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntDrug,
    EntDrugFromJSON,
    EntDrugToJSON,
    EntRegisterStore,
    EntRegisterStoreFromJSON,
    EntRegisterStoreToJSON,
    EntRequisition,
    EntRequisitionFromJSON,
    EntRequisitionToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateDrugRequest {
    drug: EntDrug;
}

export interface CreateRegisterstoreRequest {
    drug: EntRegisterStore;
}

export interface CreateRequisitionRequest {
    requisition: EntRequisition;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteRequisitionRequest {
    id: number;
}

export interface GetDrugRequest {
    id: number;
}

export interface GetRegisterStoreRequest {
    id: number;
}

export interface GetRequisitionRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListDrugRequest {
    limit?: number;
    offset?: number;
}

export interface ListRegisterstoreRequest {
    limit?: number;
    offset?: number;
}

export interface ListRequisitionRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateRequisitionRequest {
    id: number;
    requisition: EntRequisition;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create drug
     * Create drug
     */
    async createDrugRaw(requestParameters: CreateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrug(requestParameters: CreateDrugRequest): Promise<EntDrug> {
        const response = await this.createDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create registerstore
     * Create registerstore
     */
    async createRegisterstoreRaw(requestParameters: CreateRegisterstoreRequest): Promise<runtime.ApiResponse<EntRegisterStore>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createRegisterstore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/registerstores`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRegisterStoreToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegisterStoreFromJSON(jsonValue));
    }

    /**
     * Create registerstore
     * Create registerstore
     */
    async createRegisterstore(requestParameters: CreateRegisterstoreRequest): Promise<EntRegisterStore> {
        const response = await this.createRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create requisition
     * Create requisition
     */
    async createRequisitionRaw(requestParameters: CreateRequisitionRequest): Promise<runtime.ApiResponse<EntRequisition>> {
        if (requestParameters.requisition === null || requestParameters.requisition === undefined) {
            throw new runtime.RequiredError('requisition','Required parameter requestParameters.requisition was null or undefined when calling createRequisition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/requisitions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRequisitionToJSON(requestParameters.requisition),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRequisitionFromJSON(jsonValue));
    }

    /**
     * Create requisition
     * Create requisition
     */
    async createRequisition(requestParameters: CreateRequisitionRequest): Promise<EntRequisition> {
        const response = await this.createRequisitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get requisition by ID
     * Delete a requisition entity by ID
     */
    async deleteRequisitionRaw(requestParameters: DeleteRequisitionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRequisition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/requisitions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get requisition by ID
     * Delete a requisition entity by ID
     */
    async deleteRequisition(requestParameters: DeleteRequisitionRequest): Promise<object> {
        const response = await this.deleteRequisitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrugRaw(requestParameters: GetDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrug(requestParameters: GetDrugRequest): Promise<EntDrug> {
        const response = await this.getDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get registerStore by ID
     * Get a registerStore entity by ID
     */
    async getRegisterStoreRaw(requestParameters: GetRegisterStoreRequest): Promise<runtime.ApiResponse<EntRegisterStore>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRegisterStore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registerstores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegisterStoreFromJSON(jsonValue));
    }

    /**
     * get registerStore by ID
     * Get a registerStore entity by ID
     */
    async getRegisterStore(requestParameters: GetRegisterStoreRequest): Promise<EntRegisterStore> {
        const response = await this.getRegisterStoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get requisition by ID
     * Get a requisition entity by ID
     */
    async getRequisitionRaw(requestParameters: GetRequisitionRequest): Promise<runtime.ApiResponse<EntRequisition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRequisition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/requisitions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRequisitionFromJSON(jsonValue));
    }

    /**
     * get requisition by ID
     * Get a requisition entity by ID
     */
    async getRequisition(requestParameters: GetRequisitionRequest): Promise<EntRequisition> {
        const response = await this.getRequisitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrugRaw(requestParameters: ListDrugRequest): Promise<runtime.ApiResponse<Array<EntDrug>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugFromJSON));
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrug(requestParameters: ListDrugRequest): Promise<Array<EntDrug>> {
        const response = await this.listDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * list registerstore entities
     * List registerstore entities
     */
    async listRegisterstoreRaw(requestParameters: ListRegisterstoreRequest): Promise<runtime.ApiResponse<Array<EntRegisterStore>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/registerstores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRegisterStoreFromJSON));
    }

    /**
     * list registerstore entities
     * List registerstore entities
     */
    async listRegisterstore(requestParameters: ListRegisterstoreRequest): Promise<Array<EntRegisterStore>> {
        const response = await this.listRegisterstoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * list requisition entities
     * List requisition entities
     */
    async listRequisitionRaw(requestParameters: ListRequisitionRequest): Promise<runtime.ApiResponse<Array<EntRequisition>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/requisitions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRequisitionFromJSON));
    }

    /**
     * list requisition entities
     * List requisition entities
     */
    async listRequisition(requestParameters: ListRequisitionRequest): Promise<Array<EntRequisition>> {
        const response = await this.listRequisitionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update requisition by ID
     * Update a requisition entity by ID
     */
    async updateRequisitionRaw(requestParameters: UpdateRequisitionRequest): Promise<runtime.ApiResponse<EntRequisition>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRequisition.');
        }

        if (requestParameters.requisition === null || requestParameters.requisition === undefined) {
            throw new runtime.RequiredError('requisition','Required parameter requestParameters.requisition was null or undefined when calling updateRequisition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/requisitions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRequisitionToJSON(requestParameters.requisition),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRequisitionFromJSON(jsonValue));
    }

    /**
     * update requisition by ID
     * Update a requisition entity by ID
     */
    async updateRequisition(requestParameters: UpdateRequisitionRequest): Promise<EntRequisition> {
        const response = await this.updateRequisitionRaw(requestParameters);
        return await response.value();
    }

}
