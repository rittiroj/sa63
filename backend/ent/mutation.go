// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/Admin/app/ent/drug"
	"github.com/Admin/app/ent/registerstore"
	"github.com/Admin/app/ent/requisition"
	"github.com/Admin/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDrug          = "Drug"
	TypeRegisterStore = "RegisterStore"
	TypeRequisition   = "Requisition"
	TypeUser          = "User"
)

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	clearedFields       map[string]struct{}
	requisitions        map[int]struct{}
	removedrequisitions map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DrugMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DrugMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DrugMutation) ResetName() {
	m.name = nil
}

// AddRequisitionIDs adds the requisitions edge to Requisition by ids.
func (m *DrugMutation) AddRequisitionIDs(ids ...int) {
	if m.requisitions == nil {
		m.requisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.requisitions[ids[i]] = struct{}{}
	}
}

// RemoveRequisitionIDs removes the requisitions edge to Requisition by ids.
func (m *DrugMutation) RemoveRequisitionIDs(ids ...int) {
	if m.removedrequisitions == nil {
		m.removedrequisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrequisitions[ids[i]] = struct{}{}
	}
}

// RemovedRequisitions returns the removed ids of requisitions.
func (m *DrugMutation) RemovedRequisitionsIDs() (ids []int) {
	for id := range m.removedrequisitions {
		ids = append(ids, id)
	}
	return
}

// RequisitionsIDs returns the requisitions ids in the mutation.
func (m *DrugMutation) RequisitionsIDs() (ids []int) {
	for id := range m.requisitions {
		ids = append(ids, id)
	}
	return
}

// ResetRequisitions reset all changes of the "requisitions" edge.
func (m *DrugMutation) ResetRequisitions() {
	m.requisitions = nil
	m.removedrequisitions = nil
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, drug.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.requisitions != nil {
		edges = append(edges, drug.EdgeRequisitions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.requisitions))
		for id := range m.requisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrequisitions != nil {
		edges = append(edges, drug.EdgeRequisitions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.removedrequisitions))
		for id := range m.removedrequisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeRequisitions:
		m.ResetRequisitions()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// RegisterStoreMutation represents an operation that mutate the RegisterStores
// nodes in the graph.
type RegisterStoreMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	clearedFields       map[string]struct{}
	requisitions        map[int]struct{}
	removedrequisitions map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*RegisterStore, error)
}

var _ ent.Mutation = (*RegisterStoreMutation)(nil)

// registerstoreOption allows to manage the mutation configuration using functional options.
type registerstoreOption func(*RegisterStoreMutation)

// newRegisterStoreMutation creates new mutation for $n.Name.
func newRegisterStoreMutation(c config, op Op, opts ...registerstoreOption) *RegisterStoreMutation {
	m := &RegisterStoreMutation{
		config:        c,
		op:            op,
		typ:           TypeRegisterStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRegisterStoreID sets the id field of the mutation.
func withRegisterStoreID(id int) registerstoreOption {
	return func(m *RegisterStoreMutation) {
		var (
			err   error
			once  sync.Once
			value *RegisterStore
		)
		m.oldValue = func(ctx context.Context) (*RegisterStore, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RegisterStore.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRegisterStore sets the old RegisterStore of the mutation.
func withRegisterStore(node *RegisterStore) registerstoreOption {
	return func(m *RegisterStoreMutation) {
		m.oldValue = func(context.Context) (*RegisterStore, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RegisterStoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RegisterStoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RegisterStoreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *RegisterStoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *RegisterStoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the RegisterStore.
// If the RegisterStore object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RegisterStoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *RegisterStoreMutation) ResetName() {
	m.name = nil
}

// AddRequisitionIDs adds the requisitions edge to Requisition by ids.
func (m *RegisterStoreMutation) AddRequisitionIDs(ids ...int) {
	if m.requisitions == nil {
		m.requisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.requisitions[ids[i]] = struct{}{}
	}
}

// RemoveRequisitionIDs removes the requisitions edge to Requisition by ids.
func (m *RegisterStoreMutation) RemoveRequisitionIDs(ids ...int) {
	if m.removedrequisitions == nil {
		m.removedrequisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrequisitions[ids[i]] = struct{}{}
	}
}

// RemovedRequisitions returns the removed ids of requisitions.
func (m *RegisterStoreMutation) RemovedRequisitionsIDs() (ids []int) {
	for id := range m.removedrequisitions {
		ids = append(ids, id)
	}
	return
}

// RequisitionsIDs returns the requisitions ids in the mutation.
func (m *RegisterStoreMutation) RequisitionsIDs() (ids []int) {
	for id := range m.requisitions {
		ids = append(ids, id)
	}
	return
}

// ResetRequisitions reset all changes of the "requisitions" edge.
func (m *RegisterStoreMutation) ResetRequisitions() {
	m.requisitions = nil
	m.removedrequisitions = nil
}

// Op returns the operation name.
func (m *RegisterStoreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RegisterStore).
func (m *RegisterStoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RegisterStoreMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, registerstore.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RegisterStoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case registerstore.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RegisterStoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case registerstore.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown RegisterStore field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RegisterStoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case registerstore.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown RegisterStore field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RegisterStoreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RegisterStoreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RegisterStoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RegisterStore numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RegisterStoreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RegisterStoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RegisterStoreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RegisterStore nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RegisterStoreMutation) ResetField(name string) error {
	switch name {
	case registerstore.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown RegisterStore field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RegisterStoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.requisitions != nil {
		edges = append(edges, registerstore.EdgeRequisitions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RegisterStoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case registerstore.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.requisitions))
		for id := range m.requisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RegisterStoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrequisitions != nil {
		edges = append(edges, registerstore.EdgeRequisitions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RegisterStoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case registerstore.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.removedrequisitions))
		for id := range m.removedrequisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RegisterStoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RegisterStoreMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RegisterStoreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RegisterStore unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RegisterStoreMutation) ResetEdge(name string) error {
	switch name {
	case registerstore.EdgeRequisitions:
		m.ResetRequisitions()
		return nil
	}
	return fmt.Errorf("unknown RegisterStore edge %s", name)
}

// RequisitionMutation represents an operation that mutate the Requisitions
// nodes in the graph.
type RequisitionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	value                *int
	addvalue             *int
	added_time           *time.Time
	clearedFields        map[string]struct{}
	user                 *int
	cleareduser          bool
	registerstore        *int
	clearedregisterstore bool
	drug                 *int
	cleareddrug          bool
	done                 bool
	oldValue             func(context.Context) (*Requisition, error)
}

var _ ent.Mutation = (*RequisitionMutation)(nil)

// requisitionOption allows to manage the mutation configuration using functional options.
type requisitionOption func(*RequisitionMutation)

// newRequisitionMutation creates new mutation for $n.Name.
func newRequisitionMutation(c config, op Op, opts ...requisitionOption) *RequisitionMutation {
	m := &RequisitionMutation{
		config:        c,
		op:            op,
		typ:           TypeRequisition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRequisitionID sets the id field of the mutation.
func withRequisitionID(id int) requisitionOption {
	return func(m *RequisitionMutation) {
		var (
			err   error
			once  sync.Once
			value *Requisition
		)
		m.oldValue = func(ctx context.Context) (*Requisition, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Requisition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRequisition sets the old Requisition of the mutation.
func withRequisition(node *Requisition) requisitionOption {
	return func(m *RequisitionMutation) {
		m.oldValue = func(context.Context) (*Requisition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RequisitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RequisitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RequisitionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetValue sets the value field.
func (m *RequisitionMutation) SetValue(i int) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value value in the mutation.
func (m *RequisitionMutation) Value() (r int, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old value value of the Requisition.
// If the Requisition object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RequisitionMutation) OldValue(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldValue is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to value.
func (m *RequisitionMutation) AddValue(i int) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the value field in this mutation.
func (m *RequisitionMutation) AddedValue() (r int, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue reset all changes of the "value" field.
func (m *RequisitionMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetAddedTime sets the added_time field.
func (m *RequisitionMutation) SetAddedTime(t time.Time) {
	m.added_time = &t
}

// AddedTime returns the added_time value in the mutation.
func (m *RequisitionMutation) AddedTime() (r time.Time, exists bool) {
	v := m.added_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAddedTime returns the old added_time value of the Requisition.
// If the Requisition object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RequisitionMutation) OldAddedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddedTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddedTime: %w", err)
	}
	return oldValue.AddedTime, nil
}

// ResetAddedTime reset all changes of the "added_time" field.
func (m *RequisitionMutation) ResetAddedTime() {
	m.added_time = nil
}

// SetUserID sets the user edge to User by id.
func (m *RequisitionMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *RequisitionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *RequisitionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *RequisitionMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RequisitionMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *RequisitionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetRegisterstoreID sets the registerstore edge to RegisterStore by id.
func (m *RequisitionMutation) SetRegisterstoreID(id int) {
	m.registerstore = &id
}

// ClearRegisterstore clears the registerstore edge to RegisterStore.
func (m *RequisitionMutation) ClearRegisterstore() {
	m.clearedregisterstore = true
}

// RegisterstoreCleared returns if the edge registerstore was cleared.
func (m *RequisitionMutation) RegisterstoreCleared() bool {
	return m.clearedregisterstore
}

// RegisterstoreID returns the registerstore id in the mutation.
func (m *RequisitionMutation) RegisterstoreID() (id int, exists bool) {
	if m.registerstore != nil {
		return *m.registerstore, true
	}
	return
}

// RegisterstoreIDs returns the registerstore ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RegisterstoreID instead. It exists only for internal usage by the builders.
func (m *RequisitionMutation) RegisterstoreIDs() (ids []int) {
	if id := m.registerstore; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRegisterstore reset all changes of the "registerstore" edge.
func (m *RequisitionMutation) ResetRegisterstore() {
	m.registerstore = nil
	m.clearedregisterstore = false
}

// SetDrugID sets the drug edge to Drug by id.
func (m *RequisitionMutation) SetDrugID(id int) {
	m.drug = &id
}

// ClearDrug clears the drug edge to Drug.
func (m *RequisitionMutation) ClearDrug() {
	m.cleareddrug = true
}

// DrugCleared returns if the edge drug was cleared.
func (m *RequisitionMutation) DrugCleared() bool {
	return m.cleareddrug
}

// DrugID returns the drug id in the mutation.
func (m *RequisitionMutation) DrugID() (id int, exists bool) {
	if m.drug != nil {
		return *m.drug, true
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DrugID instead. It exists only for internal usage by the builders.
func (m *RequisitionMutation) DrugIDs() (ids []int) {
	if id := m.drug; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *RequisitionMutation) ResetDrug() {
	m.drug = nil
	m.cleareddrug = false
}

// Op returns the operation name.
func (m *RequisitionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Requisition).
func (m *RequisitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RequisitionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.value != nil {
		fields = append(fields, requisition.FieldValue)
	}
	if m.added_time != nil {
		fields = append(fields, requisition.FieldAddedTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RequisitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case requisition.FieldValue:
		return m.Value()
	case requisition.FieldAddedTime:
		return m.AddedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RequisitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case requisition.FieldValue:
		return m.OldValue(ctx)
	case requisition.FieldAddedTime:
		return m.OldAddedTime(ctx)
	}
	return nil, fmt.Errorf("unknown Requisition field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RequisitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case requisition.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case requisition.FieldAddedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddedTime(v)
		return nil
	}
	return fmt.Errorf("unknown Requisition field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RequisitionMutation) AddedFields() []string {
	var fields []string
	if m.addvalue != nil {
		fields = append(fields, requisition.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RequisitionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case requisition.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RequisitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case requisition.FieldValue:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Requisition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RequisitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RequisitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RequisitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Requisition nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RequisitionMutation) ResetField(name string) error {
	switch name {
	case requisition.FieldValue:
		m.ResetValue()
		return nil
	case requisition.FieldAddedTime:
		m.ResetAddedTime()
		return nil
	}
	return fmt.Errorf("unknown Requisition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RequisitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, requisition.EdgeUser)
	}
	if m.registerstore != nil {
		edges = append(edges, requisition.EdgeRegisterstore)
	}
	if m.drug != nil {
		edges = append(edges, requisition.EdgeDrug)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RequisitionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case requisition.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case requisition.EdgeRegisterstore:
		if id := m.registerstore; id != nil {
			return []ent.Value{*id}
		}
	case requisition.EdgeDrug:
		if id := m.drug; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RequisitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RequisitionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RequisitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, requisition.EdgeUser)
	}
	if m.clearedregisterstore {
		edges = append(edges, requisition.EdgeRegisterstore)
	}
	if m.cleareddrug {
		edges = append(edges, requisition.EdgeDrug)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RequisitionMutation) EdgeCleared(name string) bool {
	switch name {
	case requisition.EdgeUser:
		return m.cleareduser
	case requisition.EdgeRegisterstore:
		return m.clearedregisterstore
	case requisition.EdgeDrug:
		return m.cleareddrug
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RequisitionMutation) ClearEdge(name string) error {
	switch name {
	case requisition.EdgeUser:
		m.ClearUser()
		return nil
	case requisition.EdgeRegisterstore:
		m.ClearRegisterstore()
		return nil
	case requisition.EdgeDrug:
		m.ClearDrug()
		return nil
	}
	return fmt.Errorf("unknown Requisition unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RequisitionMutation) ResetEdge(name string) error {
	switch name {
	case requisition.EdgeUser:
		m.ResetUser()
		return nil
	case requisition.EdgeRegisterstore:
		m.ResetRegisterstore()
		return nil
	case requisition.EdgeDrug:
		m.ResetDrug()
		return nil
	}
	return fmt.Errorf("unknown Requisition edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	email               *string
	password            *string
	clearedFields       map[string]struct{}
	requisitions        map[int]struct{}
	removedrequisitions map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddRequisitionIDs adds the requisitions edge to Requisition by ids.
func (m *UserMutation) AddRequisitionIDs(ids ...int) {
	if m.requisitions == nil {
		m.requisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.requisitions[ids[i]] = struct{}{}
	}
}

// RemoveRequisitionIDs removes the requisitions edge to Requisition by ids.
func (m *UserMutation) RemoveRequisitionIDs(ids ...int) {
	if m.removedrequisitions == nil {
		m.removedrequisitions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrequisitions[ids[i]] = struct{}{}
	}
}

// RemovedRequisitions returns the removed ids of requisitions.
func (m *UserMutation) RemovedRequisitionsIDs() (ids []int) {
	for id := range m.removedrequisitions {
		ids = append(ids, id)
	}
	return
}

// RequisitionsIDs returns the requisitions ids in the mutation.
func (m *UserMutation) RequisitionsIDs() (ids []int) {
	for id := range m.requisitions {
		ids = append(ids, id)
	}
	return
}

// ResetRequisitions reset all changes of the "requisitions" edge.
func (m *UserMutation) ResetRequisitions() {
	m.requisitions = nil
	m.removedrequisitions = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.requisitions != nil {
		edges = append(edges, user.EdgeRequisitions)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.requisitions))
		for id := range m.requisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrequisitions != nil {
		edges = append(edges, user.EdgeRequisitions)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRequisitions:
		ids := make([]ent.Value, 0, len(m.removedrequisitions))
		for id := range m.removedrequisitions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRequisitions:
		m.ResetRequisitions()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
