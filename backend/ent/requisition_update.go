// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/Admin/app/ent/drug"
	"github.com/Admin/app/ent/predicate"
	"github.com/Admin/app/ent/registerstore"
	"github.com/Admin/app/ent/requisition"
	"github.com/Admin/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RequisitionUpdate is the builder for updating Requisition entities.
type RequisitionUpdate struct {
	config
	hooks      []Hook
	mutation   *RequisitionMutation
	predicates []predicate.Requisition
}

// Where adds a new predicate for the builder.
func (ru *RequisitionUpdate) Where(ps ...predicate.Requisition) *RequisitionUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetAmount sets the amount field.
func (ru *RequisitionUpdate) SetAmount(i int) *RequisitionUpdate {
	ru.mutation.ResetAmount()
	ru.mutation.SetAmount(i)
	return ru
}

// AddAmount adds i to amount.
func (ru *RequisitionUpdate) AddAmount(i int) *RequisitionUpdate {
	ru.mutation.AddAmount(i)
	return ru
}

// SetAddedTime sets the added_time field.
func (ru *RequisitionUpdate) SetAddedTime(t time.Time) *RequisitionUpdate {
	ru.mutation.SetAddedTime(t)
	return ru
}

// SetUserID sets the user edge to User by id.
func (ru *RequisitionUpdate) SetUserID(id int) *RequisitionUpdate {
	ru.mutation.SetUserID(id)
	return ru
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ru *RequisitionUpdate) SetNillableUserID(id *int) *RequisitionUpdate {
	if id != nil {
		ru = ru.SetUserID(*id)
	}
	return ru
}

// SetUser sets the user edge to User.
func (ru *RequisitionUpdate) SetUser(u *User) *RequisitionUpdate {
	return ru.SetUserID(u.ID)
}

// SetRegisterstoreID sets the registerstore edge to RegisterStore by id.
func (ru *RequisitionUpdate) SetRegisterstoreID(id int) *RequisitionUpdate {
	ru.mutation.SetRegisterstoreID(id)
	return ru
}

// SetNillableRegisterstoreID sets the registerstore edge to RegisterStore by id if the given value is not nil.
func (ru *RequisitionUpdate) SetNillableRegisterstoreID(id *int) *RequisitionUpdate {
	if id != nil {
		ru = ru.SetRegisterstoreID(*id)
	}
	return ru
}

// SetRegisterstore sets the registerstore edge to RegisterStore.
func (ru *RequisitionUpdate) SetRegisterstore(r *RegisterStore) *RequisitionUpdate {
	return ru.SetRegisterstoreID(r.ID)
}

// SetDrugID sets the drug edge to Drug by id.
func (ru *RequisitionUpdate) SetDrugID(id int) *RequisitionUpdate {
	ru.mutation.SetDrugID(id)
	return ru
}

// SetNillableDrugID sets the drug edge to Drug by id if the given value is not nil.
func (ru *RequisitionUpdate) SetNillableDrugID(id *int) *RequisitionUpdate {
	if id != nil {
		ru = ru.SetDrugID(*id)
	}
	return ru
}

// SetDrug sets the drug edge to Drug.
func (ru *RequisitionUpdate) SetDrug(d *Drug) *RequisitionUpdate {
	return ru.SetDrugID(d.ID)
}

// Mutation returns the RequisitionMutation object of the builder.
func (ru *RequisitionUpdate) Mutation() *RequisitionMutation {
	return ru.mutation
}

// ClearUser clears the user edge to User.
func (ru *RequisitionUpdate) ClearUser() *RequisitionUpdate {
	ru.mutation.ClearUser()
	return ru
}

// ClearRegisterstore clears the registerstore edge to RegisterStore.
func (ru *RequisitionUpdate) ClearRegisterstore() *RequisitionUpdate {
	ru.mutation.ClearRegisterstore()
	return ru
}

// ClearDrug clears the drug edge to Drug.
func (ru *RequisitionUpdate) ClearDrug() *RequisitionUpdate {
	ru.mutation.ClearDrug()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RequisitionUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.Amount(); ok {
		if err := requisition.AmountValidator(v); err != nil {
			return 0, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequisitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequisitionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequisitionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequisitionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequisitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requisition.Table,
			Columns: requisition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requisition.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: requisition.FieldAmount,
		})
	}
	if value, ok := ru.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: requisition.FieldAmount,
		})
	}
	if value, ok := ru.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requisition.FieldAddedTime,
		})
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.UserTable,
			Columns: []string{requisition.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.UserTable,
			Columns: []string{requisition.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RegisterstoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.RegisterstoreTable,
			Columns: []string{requisition.RegisterstoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: registerstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RegisterstoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.RegisterstoreTable,
			Columns: []string{requisition.RegisterstoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: registerstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.DrugTable,
			Columns: []string{requisition.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.DrugTable,
			Columns: []string{requisition.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requisition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RequisitionUpdateOne is the builder for updating a single Requisition entity.
type RequisitionUpdateOne struct {
	config
	hooks    []Hook
	mutation *RequisitionMutation
}

// SetAmount sets the amount field.
func (ruo *RequisitionUpdateOne) SetAmount(i int) *RequisitionUpdateOne {
	ruo.mutation.ResetAmount()
	ruo.mutation.SetAmount(i)
	return ruo
}

// AddAmount adds i to amount.
func (ruo *RequisitionUpdateOne) AddAmount(i int) *RequisitionUpdateOne {
	ruo.mutation.AddAmount(i)
	return ruo
}

// SetAddedTime sets the added_time field.
func (ruo *RequisitionUpdateOne) SetAddedTime(t time.Time) *RequisitionUpdateOne {
	ruo.mutation.SetAddedTime(t)
	return ruo
}

// SetUserID sets the user edge to User by id.
func (ruo *RequisitionUpdateOne) SetUserID(id int) *RequisitionUpdateOne {
	ruo.mutation.SetUserID(id)
	return ruo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ruo *RequisitionUpdateOne) SetNillableUserID(id *int) *RequisitionUpdateOne {
	if id != nil {
		ruo = ruo.SetUserID(*id)
	}
	return ruo
}

// SetUser sets the user edge to User.
func (ruo *RequisitionUpdateOne) SetUser(u *User) *RequisitionUpdateOne {
	return ruo.SetUserID(u.ID)
}

// SetRegisterstoreID sets the registerstore edge to RegisterStore by id.
func (ruo *RequisitionUpdateOne) SetRegisterstoreID(id int) *RequisitionUpdateOne {
	ruo.mutation.SetRegisterstoreID(id)
	return ruo
}

// SetNillableRegisterstoreID sets the registerstore edge to RegisterStore by id if the given value is not nil.
func (ruo *RequisitionUpdateOne) SetNillableRegisterstoreID(id *int) *RequisitionUpdateOne {
	if id != nil {
		ruo = ruo.SetRegisterstoreID(*id)
	}
	return ruo
}

// SetRegisterstore sets the registerstore edge to RegisterStore.
func (ruo *RequisitionUpdateOne) SetRegisterstore(r *RegisterStore) *RequisitionUpdateOne {
	return ruo.SetRegisterstoreID(r.ID)
}

// SetDrugID sets the drug edge to Drug by id.
func (ruo *RequisitionUpdateOne) SetDrugID(id int) *RequisitionUpdateOne {
	ruo.mutation.SetDrugID(id)
	return ruo
}

// SetNillableDrugID sets the drug edge to Drug by id if the given value is not nil.
func (ruo *RequisitionUpdateOne) SetNillableDrugID(id *int) *RequisitionUpdateOne {
	if id != nil {
		ruo = ruo.SetDrugID(*id)
	}
	return ruo
}

// SetDrug sets the drug edge to Drug.
func (ruo *RequisitionUpdateOne) SetDrug(d *Drug) *RequisitionUpdateOne {
	return ruo.SetDrugID(d.ID)
}

// Mutation returns the RequisitionMutation object of the builder.
func (ruo *RequisitionUpdateOne) Mutation() *RequisitionMutation {
	return ruo.mutation
}

// ClearUser clears the user edge to User.
func (ruo *RequisitionUpdateOne) ClearUser() *RequisitionUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// ClearRegisterstore clears the registerstore edge to RegisterStore.
func (ruo *RequisitionUpdateOne) ClearRegisterstore() *RequisitionUpdateOne {
	ruo.mutation.ClearRegisterstore()
	return ruo
}

// ClearDrug clears the drug edge to Drug.
func (ruo *RequisitionUpdateOne) ClearDrug() *RequisitionUpdateOne {
	ruo.mutation.ClearDrug()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RequisitionUpdateOne) Save(ctx context.Context) (*Requisition, error) {
	if v, ok := ruo.mutation.Amount(); ok {
		if err := requisition.AmountValidator(v); err != nil {
			return nil, &ValidationError{Name: "amount", err: fmt.Errorf("ent: validator failed for field \"amount\": %w", err)}
		}
	}

	var (
		err  error
		node *Requisition
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequisitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequisitionUpdateOne) SaveX(ctx context.Context) *Requisition {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RequisitionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequisitionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequisitionUpdateOne) sqlSave(ctx context.Context) (r *Requisition, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   requisition.Table,
			Columns: requisition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requisition.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Requisition.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: requisition.FieldAmount,
		})
	}
	if value, ok := ruo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: requisition.FieldAmount,
		})
	}
	if value, ok := ruo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requisition.FieldAddedTime,
		})
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.UserTable,
			Columns: []string{requisition.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.UserTable,
			Columns: []string{requisition.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RegisterstoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.RegisterstoreTable,
			Columns: []string{requisition.RegisterstoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: registerstore.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RegisterstoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.RegisterstoreTable,
			Columns: []string{requisition.RegisterstoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: registerstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.DrugTable,
			Columns: []string{requisition.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.DrugTable,
			Columns: []string{requisition.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Requisition{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requisition.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
