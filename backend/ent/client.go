// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Admin/app/ent/migrate"

	"github.com/Admin/app/ent/drug"
	"github.com/Admin/app/ent/registerstore"
	"github.com/Admin/app/ent/requisition"
	"github.com/Admin/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Drug is the client for interacting with the Drug builders.
	Drug *DrugClient
	// RegisterStore is the client for interacting with the RegisterStore builders.
	RegisterStore *RegisterStoreClient
	// Requisition is the client for interacting with the Requisition builders.
	Requisition *RequisitionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Drug = NewDrugClient(c.config)
	c.RegisterStore = NewRegisterStoreClient(c.config)
	c.Requisition = NewRequisitionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Drug:          NewDrugClient(cfg),
		RegisterStore: NewRegisterStoreClient(cfg),
		Requisition:   NewRequisitionClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:        cfg,
		Drug:          NewDrugClient(cfg),
		RegisterStore: NewRegisterStoreClient(cfg),
		Requisition:   NewRequisitionClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Drug.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Drug.Use(hooks...)
	c.RegisterStore.Use(hooks...)
	c.Requisition.Use(hooks...)
	c.User.Use(hooks...)
}

// DrugClient is a client for the Drug schema.
type DrugClient struct {
	config
}

// NewDrugClient returns a client for the Drug from the given config.
func NewDrugClient(c config) *DrugClient {
	return &DrugClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drug.Hooks(f(g(h())))`.
func (c *DrugClient) Use(hooks ...Hook) {
	c.hooks.Drug = append(c.hooks.Drug, hooks...)
}

// Create returns a create builder for Drug.
func (c *DrugClient) Create() *DrugCreate {
	mutation := newDrugMutation(c.config, OpCreate)
	return &DrugCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Drug.
func (c *DrugClient) Update() *DrugUpdate {
	mutation := newDrugMutation(c.config, OpUpdate)
	return &DrugUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugClient) UpdateOne(d *Drug) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrug(d))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugClient) UpdateOneID(id int) *DrugUpdateOne {
	mutation := newDrugMutation(c.config, OpUpdateOne, withDrugID(id))
	return &DrugUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Drug.
func (c *DrugClient) Delete() *DrugDelete {
	mutation := newDrugMutation(c.config, OpDelete)
	return &DrugDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugClient) DeleteOne(d *Drug) *DrugDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugClient) DeleteOneID(id int) *DrugDeleteOne {
	builder := c.Delete().Where(drug.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugDeleteOne{builder}
}

// Create returns a query builder for Drug.
func (c *DrugClient) Query() *DrugQuery {
	return &DrugQuery{config: c.config}
}

// Get returns a Drug entity by its id.
func (c *DrugClient) Get(ctx context.Context, id int) (*Drug, error) {
	return c.Query().Where(drug.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugClient) GetX(ctx context.Context, id int) *Drug {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryRequisitions queries the requisitions edge of a Drug.
func (c *DrugClient) QueryRequisitions(d *Drug) *RequisitionQuery {
	query := &RequisitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drug.Table, drug.FieldID, id),
			sqlgraph.To(requisition.Table, requisition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, drug.RequisitionsTable, drug.RequisitionsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugClient) Hooks() []Hook {
	return c.hooks.Drug
}

// RegisterStoreClient is a client for the RegisterStore schema.
type RegisterStoreClient struct {
	config
}

// NewRegisterStoreClient returns a client for the RegisterStore from the given config.
func NewRegisterStoreClient(c config) *RegisterStoreClient {
	return &RegisterStoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `registerstore.Hooks(f(g(h())))`.
func (c *RegisterStoreClient) Use(hooks ...Hook) {
	c.hooks.RegisterStore = append(c.hooks.RegisterStore, hooks...)
}

// Create returns a create builder for RegisterStore.
func (c *RegisterStoreClient) Create() *RegisterStoreCreate {
	mutation := newRegisterStoreMutation(c.config, OpCreate)
	return &RegisterStoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RegisterStore.
func (c *RegisterStoreClient) Update() *RegisterStoreUpdate {
	mutation := newRegisterStoreMutation(c.config, OpUpdate)
	return &RegisterStoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegisterStoreClient) UpdateOne(rs *RegisterStore) *RegisterStoreUpdateOne {
	mutation := newRegisterStoreMutation(c.config, OpUpdateOne, withRegisterStore(rs))
	return &RegisterStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegisterStoreClient) UpdateOneID(id int) *RegisterStoreUpdateOne {
	mutation := newRegisterStoreMutation(c.config, OpUpdateOne, withRegisterStoreID(id))
	return &RegisterStoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RegisterStore.
func (c *RegisterStoreClient) Delete() *RegisterStoreDelete {
	mutation := newRegisterStoreMutation(c.config, OpDelete)
	return &RegisterStoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RegisterStoreClient) DeleteOne(rs *RegisterStore) *RegisterStoreDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RegisterStoreClient) DeleteOneID(id int) *RegisterStoreDeleteOne {
	builder := c.Delete().Where(registerstore.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegisterStoreDeleteOne{builder}
}

// Create returns a query builder for RegisterStore.
func (c *RegisterStoreClient) Query() *RegisterStoreQuery {
	return &RegisterStoreQuery{config: c.config}
}

// Get returns a RegisterStore entity by its id.
func (c *RegisterStoreClient) Get(ctx context.Context, id int) (*RegisterStore, error) {
	return c.Query().Where(registerstore.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegisterStoreClient) GetX(ctx context.Context, id int) *RegisterStore {
	rs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rs
}

// QueryRequisitions queries the requisitions edge of a RegisterStore.
func (c *RegisterStoreClient) QueryRequisitions(rs *RegisterStore) *RequisitionQuery {
	query := &RequisitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(registerstore.Table, registerstore.FieldID, id),
			sqlgraph.To(requisition.Table, requisition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, registerstore.RequisitionsTable, registerstore.RequisitionsColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegisterStoreClient) Hooks() []Hook {
	return c.hooks.RegisterStore
}

// RequisitionClient is a client for the Requisition schema.
type RequisitionClient struct {
	config
}

// NewRequisitionClient returns a client for the Requisition from the given config.
func NewRequisitionClient(c config) *RequisitionClient {
	return &RequisitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `requisition.Hooks(f(g(h())))`.
func (c *RequisitionClient) Use(hooks ...Hook) {
	c.hooks.Requisition = append(c.hooks.Requisition, hooks...)
}

// Create returns a create builder for Requisition.
func (c *RequisitionClient) Create() *RequisitionCreate {
	mutation := newRequisitionMutation(c.config, OpCreate)
	return &RequisitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Requisition.
func (c *RequisitionClient) Update() *RequisitionUpdate {
	mutation := newRequisitionMutation(c.config, OpUpdate)
	return &RequisitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RequisitionClient) UpdateOne(r *Requisition) *RequisitionUpdateOne {
	mutation := newRequisitionMutation(c.config, OpUpdateOne, withRequisition(r))
	return &RequisitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RequisitionClient) UpdateOneID(id int) *RequisitionUpdateOne {
	mutation := newRequisitionMutation(c.config, OpUpdateOne, withRequisitionID(id))
	return &RequisitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Requisition.
func (c *RequisitionClient) Delete() *RequisitionDelete {
	mutation := newRequisitionMutation(c.config, OpDelete)
	return &RequisitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RequisitionClient) DeleteOne(r *Requisition) *RequisitionDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RequisitionClient) DeleteOneID(id int) *RequisitionDeleteOne {
	builder := c.Delete().Where(requisition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RequisitionDeleteOne{builder}
}

// Create returns a query builder for Requisition.
func (c *RequisitionClient) Query() *RequisitionQuery {
	return &RequisitionQuery{config: c.config}
}

// Get returns a Requisition entity by its id.
func (c *RequisitionClient) Get(ctx context.Context, id int) (*Requisition, error) {
	return c.Query().Where(requisition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RequisitionClient) GetX(ctx context.Context, id int) *Requisition {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryUser queries the user edge of a Requisition.
func (c *RequisitionClient) QueryUser(r *Requisition) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requisition.Table, requisition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requisition.UserTable, requisition.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRegisterstore queries the registerstore edge of a Requisition.
func (c *RequisitionClient) QueryRegisterstore(r *Requisition) *RegisterStoreQuery {
	query := &RegisterStoreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requisition.Table, requisition.FieldID, id),
			sqlgraph.To(registerstore.Table, registerstore.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requisition.RegisterstoreTable, requisition.RegisterstoreColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDrug queries the drug edge of a Requisition.
func (c *RequisitionClient) QueryDrug(r *Requisition) *DrugQuery {
	query := &DrugQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(requisition.Table, requisition.FieldID, id),
			sqlgraph.To(drug.Table, drug.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, requisition.DrugTable, requisition.DrugColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RequisitionClient) Hooks() []Hook {
	return c.hooks.Requisition
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryRequisitions queries the requisitions edge of a User.
func (c *UserClient) QueryRequisitions(u *User) *RequisitionQuery {
	query := &RequisitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(requisition.Table, requisition.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RequisitionsTable, user.RequisitionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
