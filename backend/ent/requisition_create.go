// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/Admin/app/ent/drug"
	"github.com/Admin/app/ent/registerstore"
	"github.com/Admin/app/ent/requisition"
	"github.com/Admin/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RequisitionCreate is the builder for creating a Requisition entity.
type RequisitionCreate struct {
	config
	mutation *RequisitionMutation
	hooks    []Hook
}

// SetValue sets the value field.
func (rc *RequisitionCreate) SetValue(i int) *RequisitionCreate {
	rc.mutation.SetValue(i)
	return rc
}

// SetAddedTime sets the added_time field.
func (rc *RequisitionCreate) SetAddedTime(t time.Time) *RequisitionCreate {
	rc.mutation.SetAddedTime(t)
	return rc
}

// SetUserID sets the user edge to User by id.
func (rc *RequisitionCreate) SetUserID(id int) *RequisitionCreate {
	rc.mutation.SetUserID(id)
	return rc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (rc *RequisitionCreate) SetNillableUserID(id *int) *RequisitionCreate {
	if id != nil {
		rc = rc.SetUserID(*id)
	}
	return rc
}

// SetUser sets the user edge to User.
func (rc *RequisitionCreate) SetUser(u *User) *RequisitionCreate {
	return rc.SetUserID(u.ID)
}

// SetRegisterstoreID sets the registerstore edge to RegisterStore by id.
func (rc *RequisitionCreate) SetRegisterstoreID(id int) *RequisitionCreate {
	rc.mutation.SetRegisterstoreID(id)
	return rc
}

// SetNillableRegisterstoreID sets the registerstore edge to RegisterStore by id if the given value is not nil.
func (rc *RequisitionCreate) SetNillableRegisterstoreID(id *int) *RequisitionCreate {
	if id != nil {
		rc = rc.SetRegisterstoreID(*id)
	}
	return rc
}

// SetRegisterstore sets the registerstore edge to RegisterStore.
func (rc *RequisitionCreate) SetRegisterstore(r *RegisterStore) *RequisitionCreate {
	return rc.SetRegisterstoreID(r.ID)
}

// SetDrugID sets the drug edge to Drug by id.
func (rc *RequisitionCreate) SetDrugID(id int) *RequisitionCreate {
	rc.mutation.SetDrugID(id)
	return rc
}

// SetNillableDrugID sets the drug edge to Drug by id if the given value is not nil.
func (rc *RequisitionCreate) SetNillableDrugID(id *int) *RequisitionCreate {
	if id != nil {
		rc = rc.SetDrugID(*id)
	}
	return rc
}

// SetDrug sets the drug edge to Drug.
func (rc *RequisitionCreate) SetDrug(d *Drug) *RequisitionCreate {
	return rc.SetDrugID(d.ID)
}

// Mutation returns the RequisitionMutation object of the builder.
func (rc *RequisitionCreate) Mutation() *RequisitionMutation {
	return rc.mutation
}

// Save creates the Requisition in the database.
func (rc *RequisitionCreate) Save(ctx context.Context) (*Requisition, error) {
	if _, ok := rc.mutation.Value(); !ok {
		return nil, &ValidationError{Name: "value", err: errors.New("ent: missing required field \"value\"")}
	}
	if v, ok := rc.mutation.Value(); ok {
		if err := requisition.ValueValidator(v); err != nil {
			return nil, &ValidationError{Name: "value", err: fmt.Errorf("ent: validator failed for field \"value\": %w", err)}
		}
	}
	if _, ok := rc.mutation.AddedTime(); !ok {
		return nil, &ValidationError{Name: "added_time", err: errors.New("ent: missing required field \"added_time\"")}
	}
	var (
		err  error
		node *Requisition
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RequisitionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RequisitionCreate) SaveX(ctx context.Context) *Requisition {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RequisitionCreate) sqlSave(ctx context.Context) (*Requisition, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RequisitionCreate) createSpec() (*Requisition, *sqlgraph.CreateSpec) {
	var (
		r     = &Requisition{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: requisition.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: requisition.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: requisition.FieldValue,
		})
		r.Value = value
	}
	if value, ok := rc.mutation.AddedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: requisition.FieldAddedTime,
		})
		r.AddedTime = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.UserTable,
			Columns: []string{requisition.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RegisterstoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.RegisterstoreTable,
			Columns: []string{requisition.RegisterstoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: registerstore.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requisition.DrugTable,
			Columns: []string{requisition.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
