// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/Admin/app/ent/drug"
	"github.com/Admin/app/ent/registerstore"
	"github.com/Admin/app/ent/requisition"
	"github.com/Admin/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Requisition is the model entity for the Requisition schema.
type Requisition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequisitionQuery when eager-loading is set.
	Edges            RequisitionEdges `json:"edges"`
	drug_id          *int
	registerstore_id *int
	user_id          *int
}

// RequisitionEdges holds the relations/edges for other nodes in the graph.
type RequisitionEdges struct {
	// User holds the value of the user edge.
	User *User
	// Registerstore holds the value of the registerstore edge.
	Registerstore *RegisterStore
	// Drug holds the value of the drug edge.
	Drug *Drug
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequisitionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RegisterstoreOrErr returns the Registerstore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequisitionEdges) RegisterstoreOrErr() (*RegisterStore, error) {
	if e.loadedTypes[1] {
		if e.Registerstore == nil {
			// The edge registerstore was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: registerstore.Label}
		}
		return e.Registerstore, nil
	}
	return nil, &NotLoadedError{edge: "registerstore"}
}

// DrugOrErr returns the Drug value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequisitionEdges) DrugOrErr() (*Drug, error) {
	if e.loadedTypes[2] {
		if e.Drug == nil {
			// The edge drug was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: drug.Label}
		}
		return e.Drug, nil
	}
	return nil, &NotLoadedError{edge: "drug"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Requisition) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Requisition) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // drug_id
		&sql.NullInt64{}, // registerstore_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Requisition fields.
func (r *Requisition) assignValues(values ...interface{}) error {
	if m, n := len(values), len(requisition.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		r.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(requisition.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field drug_id", value)
		} else if value.Valid {
			r.drug_id = new(int)
			*r.drug_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field registerstore_id", value)
		} else if value.Valid {
			r.registerstore_id = new(int)
			*r.registerstore_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			r.user_id = new(int)
			*r.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Requisition.
func (r *Requisition) QueryUser() *UserQuery {
	return (&RequisitionClient{config: r.config}).QueryUser(r)
}

// QueryRegisterstore queries the registerstore edge of the Requisition.
func (r *Requisition) QueryRegisterstore() *RegisterStoreQuery {
	return (&RequisitionClient{config: r.config}).QueryRegisterstore(r)
}

// QueryDrug queries the drug edge of the Requisition.
func (r *Requisition) QueryDrug() *DrugQuery {
	return (&RequisitionClient{config: r.config}).QueryDrug(r)
}

// Update returns a builder for updating this Requisition.
// Note that, you need to call Requisition.Unwrap() before calling this method, if this Requisition
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Requisition) Update() *RequisitionUpdateOne {
	return (&RequisitionClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Requisition) Unwrap() *Requisition {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Requisition is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Requisition) String() string {
	var builder strings.Builder
	builder.WriteString("Requisition(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(r.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Requisitions is a parsable slice of Requisition.
type Requisitions []*Requisition

func (r Requisitions) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
